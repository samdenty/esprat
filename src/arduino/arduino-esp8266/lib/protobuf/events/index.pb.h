/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 at Sat Jan 12 22:10:13 2019. */

#ifndef PB_EVENTS_INDEX_PB_H_INCLUDED
#define PB_EVENTS_INDEX_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _events_MessageEvent_EventName {
    events_MessageEvent_EventName_KeyPress = 0
} events_MessageEvent_EventName;
#define _events_MessageEvent_EventName_MIN events_MessageEvent_EventName_KeyPress
#define _events_MessageEvent_EventName_MAX events_MessageEvent_EventName_KeyPress
#define _events_MessageEvent_EventName_ARRAYSIZE ((events_MessageEvent_EventName)(events_MessageEvent_EventName_KeyPress+1))

/* Struct definitions */
typedef struct _events_MessageEvent {
    events_MessageEvent_EventName event;
    int32_t id;
    pb_callback_t message;
/* @@protoc_insertion_point(struct:events_MessageEvent) */
} events_MessageEvent;

/* Default values for struct fields */

/* Initializer values for message structs */
#define events_MessageEvent_init_default         {_events_MessageEvent_EventName_MIN, 0, {{NULL}, NULL}}
#define events_MessageEvent_init_zero            {_events_MessageEvent_EventName_MIN, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define events_MessageEvent_event_tag            1
#define events_MessageEvent_id_tag               2
#define events_MessageEvent_message_tag          3

/* Struct field encoding specification for nanopb */
extern const pb_field_t events_MessageEvent_fields[4];

/* Maximum encoded size of messages (where known) */
/* events_MessageEvent_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define INDEX_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
