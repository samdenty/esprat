// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { Zombie, MQTTConnection, DirectConnection } from './schema'
import { Context } from '../types'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsGetZombie {
    id: string
  }

  export type GetZombieResolver = (
    parent: undefined,
    args: ArgsGetZombie,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Zombie | null | Promise<Zombie | null>

  export interface Type {
    getZombie: (
      parent: undefined,
      args: ArgsGetZombie,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Zombie | null | Promise<Zombie | null>
  }
}

export namespace ZombieResolvers {
  export const defaultResolvers = {
    id: (parent: Zombie) => parent.id,
  }

  export type IdResolver = (
    parent: Zombie,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type MqttConnectionResolver = (
    parent: Zombie,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MQTTConnection | null | Promise<MQTTConnection | null>

  export type DirectConnectionsResolver = (
    parent: Zombie,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DirectConnection[] | Promise<DirectConnection[]>

  export interface Type {
    id: (
      parent: Zombie,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    mqttConnection: (
      parent: Zombie,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MQTTConnection | null | Promise<MQTTConnection | null>

    directConnections: (
      parent: Zombie,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DirectConnection[] | Promise<DirectConnection[]>
  }
}

export namespace MQTTConnectionResolvers {
  export const defaultResolvers = {
    id: (parent: MQTTConnection) => parent.id,
    address: (parent: MQTTConnection) => parent.address,
    username: (parent: MQTTConnection) =>
      parent.username === undefined ? null : parent.username,
    password: (parent: MQTTConnection) =>
      parent.password === undefined ? null : parent.password,
  }

  export type IdResolver = (
    parent: MQTTConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type ZombieResolver = (
    parent: MQTTConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Zombie | null | Promise<Zombie | null>

  export type AddressResolver = (
    parent: MQTTConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type UsernameResolver = (
    parent: MQTTConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>

  export type PasswordResolver = (
    parent: MQTTConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>

  export interface Type {
    id: (
      parent: MQTTConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    zombie: (
      parent: MQTTConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Zombie | null | Promise<Zombie | null>

    address: (
      parent: MQTTConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    username: (
      parent: MQTTConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>

    password: (
      parent: MQTTConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }
}

export namespace DirectConnectionResolvers {
  export const defaultResolvers = {
    id: (parent: DirectConnection) => parent.id,
    address: (parent: DirectConnection) => parent.address,
  }

  export type IdResolver = (
    parent: DirectConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type AddressResolver = (
    parent: DirectConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type ZombiesResolver = (
    parent: DirectConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Zombie[] | Promise<Zombie[]>

  export interface Type {
    id: (
      parent: DirectConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    address: (
      parent: DirectConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    zombies: (
      parent: DirectConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Zombie[] | Promise<Zombie[]>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface ArgsAddZombie {
    id: string
  }

  export interface ArgsRemoveZombie {
    id: string
  }

  export type AddZombieResolver = (
    parent: undefined,
    args: ArgsAddZombie,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Zombie | Promise<Zombie>

  export type RemoveZombieResolver = (
    parent: undefined,
    args: ArgsRemoveZombie,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>

  export interface Type {
    createZombie: (
      parent: undefined,
      args: ArgsAddZombie,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Zombie | Promise<Zombie>

    deleteZombie: (
      parent: undefined,
      args: ArgsRemoveZombie,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Zombie: ZombieResolvers.Type
  MQTTConnection: MQTTConnectionResolvers.Type
  DirectConnection: DirectConnectionResolvers.Type
  Mutation: MutationResolvers.Type
}
