{"version":3,"sources":["../../../node_modules/@protobufjs/aspromise/index.js","../../../node_modules/@protobufjs/base64/index.js","../../../node_modules/@protobufjs/eventemitter/index.js","../../../node_modules/@protobufjs/float/index.js","../../../node_modules/@protobufjs/inquire/index.js","../../../node_modules/@protobufjs/utf8/index.js","../../../node_modules/@protobufjs/pool/index.js","../../../node_modules/protobufjs/src/util/longbits.js","../../../node_modules/base64-js/index.js","../../../node_modules/ieee754/index.js","../../../node_modules/isarray/index.js","../../../node_modules/buffer/index.js","../../../node_modules/protobufjs/src/util/minimal.js","../../../node_modules/protobufjs/src/writer.js","../../../node_modules/protobufjs/src/writer_buffer.js","../../../node_modules/protobufjs/src/reader.js","../../../node_modules/protobufjs/src/reader_buffer.js","../../../node_modules/protobufjs/src/rpc/service.js","../../../node_modules/protobufjs/src/rpc.js","../../../node_modules/protobufjs/src/roots.js","../../../node_modules/protobufjs/src/index-minimal.js","../../../node_modules/protobufjs/minimal.js","../src/generated/index.js","index.ts"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","commands","PressKeyRequest","properties","keys","Object","i","length","prototype","keyCode","create","encode","message","writer","hasOwnProperty","uint32","int32","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","toObject","options","defaults","toJSON","constructor","toJSONOptions","TypeTextRequest","text","string","isString","String","Commands","rpcImpl","requestDelimited","responseDelimited","rpc","Service","call","defineProperty","pressKey","request","callback","rpcCall","google","protobuf","Empty","value","typeText","MessageEvent","event","id","newBuffer","bytes","base64","enums","Array","EventName","slice","valuesById","values","events","KeyPress","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;;ACJA;AACA;;;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB,EAEA;;;AACA,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAxB;AAAA,IACEC,OAAO,GAAGJ,SAAS,CAACK,MADtB;AAAA,IAEEC,KAAK,GAAGN,SAAS,CAACO,IAFpB,EAIA;;AACA,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAV,CAAgB,SAAhB,MAA+BT,SAAS,CAACS,KAAV,CAAgB,SAAhB,IAA6B,EAA5D,CAAZ;;AAEAD,KAAK,CAACE,QAAN,GAAkB,YAAW;AAC3B;;;;;AAKA,MAAIA,QAAQ,GAAG,EAAf;;AAEAA,EAAAA,QAAQ,CAACC,eAAT,GAA4B,YAAW;AACrC;;;;;;;AAOA;;;;;;;;AAQA,aAASA,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,UAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,YAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;AAMAJ,IAAAA,eAAe,CAACM,SAAhB,CAA0BC,OAA1B,GAAoC,CAApC;AAEA;;;;;;;;;AAQAP,IAAAA,eAAe,CAACQ,MAAhB,GAAyB,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AACnD,aAAO,IAAID,eAAJ,CAAoBC,UAApB,CAAP;AACD,KAFD;AAIA;;;;;;;;;;;AASAD,IAAAA,eAAe,CAACS,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AACxD,UAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,UAAIE,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,OAAtC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACH,OAAvD;AACF,aAAOI,MAAP;AACD,KALD;AAOA;;;;;;;;;;;AASAX,IAAAA,eAAe,CAACe,eAAhB,GAAkC,SAASA,eAAT,CAChCL,OADgC,EAEhCC,MAFgC,EAGhC;AACA,aAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,KALD;AAOA;;;;;;;;;;;;;AAWAhB,IAAAA,eAAe,CAACiB,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AACvD,UAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,UAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,UACEK,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAeC,eAAnB,EADZ;;AAEA,aAAOkB,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,YAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,gBAAQU,GAAG,KAAK,CAAhB;AACE,eAAK,CAAL;AACEb,YAAAA,OAAO,CAACH,OAAR,GAAkBW,MAAM,CAACJ,KAAP,EAAlB;AACA;;AACF;AACEI,YAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AANJ;AAQD;;AACD,aAAOb,OAAP;AACD,KAhBD;AAkBA;;;;;;;;;;;;AAUAV,IAAAA,eAAe,CAACyB,eAAhB,GAAkC,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AACjE,UAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,aAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,KAHD;AAKA;;;;;;;;;;AAQAb,IAAAA,eAAe,CAAC0B,MAAhB,GAAyB,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AAChD,UAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,UAAIA,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACE,IAAI,CAACjB,KAAK,CAACgC,SAAN,CAAgBjB,OAAO,CAACH,OAAxB,CAAL,EACE,OAAO,2BAAP;AACJ,aAAO,IAAP;AACD,KAPD;AASA;;;;;;;;;;AAQAP,IAAAA,eAAe,CAAC4B,UAAhB,GAA6B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACvD,UAAIA,MAAM,YAAYhC,KAAK,CAACE,QAAN,CAAeC,eAArC,EAAsD,OAAO6B,MAAP;AACtD,UAAInB,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAeC,eAAnB,EAAd;AACA,UAAI6B,MAAM,CAACtB,OAAP,IAAkB,IAAtB,EAA4BG,OAAO,CAACH,OAAR,GAAkBsB,MAAM,CAACtB,OAAP,GAAiB,CAAnC;AAC5B,aAAOG,OAAP;AACD,KALD;AAOA;;;;;;;;;;;AASAV,IAAAA,eAAe,CAAC8B,QAAhB,GAA2B,SAASA,QAAT,CAAkBpB,OAAlB,EAA2BqB,OAA3B,EAAoC;AAC7D,UAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,UAAIF,MAAM,GAAG,EAAb;AACA,UAAIE,OAAO,CAACC,QAAZ,EAAsBH,MAAM,CAACtB,OAAP,GAAiB,CAAjB;AACtB,UAAIG,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACEiB,MAAM,CAACtB,OAAP,GAAiBG,OAAO,CAACH,OAAzB;AACF,aAAOsB,MAAP;AACD,KAPD;AASA;;;;;;;;;AAOA7B,IAAAA,eAAe,CAACM,SAAhB,CAA0B2B,MAA1B,GAAmC,SAASA,MAAT,GAAkB;AACnD,aAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,KAFD;;AAIA,WAAOnC,eAAP;AACD,GApL0B,EAA3B;;AAsLAD,EAAAA,QAAQ,CAACqC,eAAT,GAA4B,YAAW;AACrC;;;;;;;AAOA;;;;;;;;AAQA,aAASA,eAAT,CAAyBnC,UAAzB,EAAqC;AACnC,UAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,YAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;AAMAgC,IAAAA,eAAe,CAAC9B,SAAhB,CAA0B+B,IAA1B,GAAiC,EAAjC;AAEA;;;;;;;;;AAQAD,IAAAA,eAAe,CAAC5B,MAAhB,GAAyB,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AACnD,aAAO,IAAImC,eAAJ,CAAoBnC,UAApB,CAAP;AACD,KAFD;AAIA;;;;;;;;;;;AASAmC,IAAAA,eAAe,CAAC3B,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AACxD,UAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,UAAIE,OAAO,CAAC2B,IAAR,IAAgB,IAAhB,IAAwB3B,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,QAAtC,EAA0CyB,MAA1C,CAAiD5B,OAAO,CAAC2B,IAAzD;AACF,aAAO1B,MAAP;AACD,KALD;AAOA;;;;;;;;;;;AASAyB,IAAAA,eAAe,CAACrB,eAAhB,GAAkC,SAASA,eAAT,CAChCL,OADgC,EAEhCC,MAFgC,EAGhC;AACA,aAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,KALD;AAOA;;;;;;;;;;;;;AAWAoB,IAAAA,eAAe,CAACnB,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AACvD,UAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,UAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,UACEK,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAeqC,eAAnB,EADZ;;AAEA,aAAOlB,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,YAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,gBAAQU,GAAG,KAAK,CAAhB;AACE,eAAK,CAAL;AACEb,YAAAA,OAAO,CAAC2B,IAAR,GAAenB,MAAM,CAACoB,MAAP,EAAf;AACA;;AACF;AACEpB,YAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AANJ;AAQD;;AACD,aAAOb,OAAP;AACD,KAhBD;AAkBA;;;;;;;;;;;;AAUA0B,IAAAA,eAAe,CAACX,eAAhB,GAAkC,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AACjE,UAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,aAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,KAHD;AAKA;;;;;;;;;;AAQAuB,IAAAA,eAAe,CAACV,MAAhB,GAAyB,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AAChD,UAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,UAAIA,OAAO,CAAC2B,IAAR,IAAgB,IAAhB,IAAwB3B,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACE,IAAI,CAACjB,KAAK,CAAC4C,QAAN,CAAe7B,OAAO,CAAC2B,IAAvB,CAAL,EAAmC,OAAO,uBAAP;AACrC,aAAO,IAAP;AACD,KAND;AAQA;;;;;;;;;;AAQAD,IAAAA,eAAe,CAACR,UAAhB,GAA6B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACvD,UAAIA,MAAM,YAAYhC,KAAK,CAACE,QAAN,CAAeqC,eAArC,EAAsD,OAAOP,MAAP;AACtD,UAAInB,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAeqC,eAAnB,EAAd;AACA,UAAIP,MAAM,CAACQ,IAAP,IAAe,IAAnB,EAAyB3B,OAAO,CAAC2B,IAAR,GAAeG,MAAM,CAACX,MAAM,CAACQ,IAAR,CAArB;AACzB,aAAO3B,OAAP;AACD,KALD;AAOA;;;;;;;;;;;AASA0B,IAAAA,eAAe,CAACN,QAAhB,GAA2B,SAASA,QAAT,CAAkBpB,OAAlB,EAA2BqB,OAA3B,EAAoC;AAC7D,UAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,UAAIF,MAAM,GAAG,EAAb;AACA,UAAIE,OAAO,CAACC,QAAZ,EAAsBH,MAAM,CAACQ,IAAP,GAAc,EAAd;AACtB,UAAI3B,OAAO,CAAC2B,IAAR,IAAgB,IAAhB,IAAwB3B,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAA5B,EACEiB,MAAM,CAACQ,IAAP,GAAc3B,OAAO,CAAC2B,IAAtB;AACF,aAAOR,MAAP;AACD,KAPD;AASA;;;;;;;;;AAOAO,IAAAA,eAAe,CAAC9B,SAAhB,CAA0B2B,MAA1B,GAAmC,SAASA,MAAT,GAAkB;AACnD,aAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,KAFD;;AAIA,WAAOC,eAAP;AACD,GAnL0B,EAA3B;;AAqLArC,EAAAA,QAAQ,CAAC0C,QAAT,GAAqB,YAAW;AAC9B;;;;;;;;;;AAUA,aAASA,QAAT,CAAkBC,OAAlB,EAA2BC,gBAA3B,EAA6CC,iBAA7C,EAAgE;AAC9DvD,MAAAA,SAAS,CAACwD,GAAV,CAAcC,OAAd,CAAsBC,IAAtB,CACE,IADF,EAEEL,OAFF,EAGEC,gBAHF,EAIEC,iBAJF;AAMD;;AAED;AAAC,KAACH,QAAQ,CAACnC,SAAT,GAAqBH,MAAM,CAACK,MAAP,CACrBnB,SAAS,CAACwD,GAAV,CAAcC,OAAd,CAAsBxC,SADD,CAAtB,EAEE4B,WAFF,GAEgBO,QAFhB;AAID;;;;;;;;;;;AAUAA,IAAAA,QAAQ,CAACjC,MAAT,GAAkB,SAASA,MAAT,CAChBkC,OADgB,EAEhBC,gBAFgB,EAGhBC,iBAHgB,EAIhB;AACA,aAAO,IAAI,IAAJ,CAASF,OAAT,EAAkBC,gBAAlB,EAAoCC,iBAApC,CAAP;AACD,KAND;AAQA;;;;;;;;;AASA;;;;;;;;;;;;AAUAzC,IAAAA,MAAM,CAAC6C,cAAP,CACGP,QAAQ,CAACnC,SAAT,CAAmB2C,QAAnB,GAA8B,SAASA,QAAT,CAAkBC,OAAlB,EAA2BC,QAA3B,EAAqC;AAClE,aAAO,KAAKC,OAAL,CACLH,QADK,EAELpD,KAAK,CAACE,QAAN,CAAeC,eAFV,EAGLH,KAAK,CAACwD,MAAN,CAAaC,QAAb,CAAsBC,KAHjB,EAILL,OAJK,EAKLC,QALK,CAAP;AAOD,KATH,EAUE,MAVF,EAWE;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAXF;AAcA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;AAUArD,IAAAA,MAAM,CAAC6C,cAAP,CACGP,QAAQ,CAACnC,SAAT,CAAmBmD,QAAnB,GAA8B,SAASA,QAAT,CAAkBP,OAAlB,EAA2BC,QAA3B,EAAqC;AAClE,aAAO,KAAKC,OAAL,CACLK,QADK,EAEL5D,KAAK,CAACE,QAAN,CAAeqC,eAFV,EAGLvC,KAAK,CAACwD,MAAN,CAAaC,QAAb,CAAsBC,KAHjB,EAILL,OAJK,EAKLC,QALK,CAAP;AAOD,KATH,EAUE,MAVF,EAWE;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAXF;AAcA;;;;;;;;;;AAUA,WAAOf,QAAP;AACD,GAjImB,EAApB;;AAmIA1C,EAAAA,QAAQ,CAAC2D,YAAT,GAAyB,YAAW;AAClC;;;;;;;;;AASA;;;;;;;;AAQA,aAASA,YAAT,CAAsBzD,UAAtB,EAAkC;AAChC,UAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,YAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;AAMAsD,IAAAA,YAAY,CAACpD,SAAb,CAAuBqD,KAAvB,GAA+B,CAA/B;AAEA;;;;;;;AAMAD,IAAAA,YAAY,CAACpD,SAAb,CAAuBsD,EAAvB,GAA4B,CAA5B;AAEA;;;;;;;AAMAF,IAAAA,YAAY,CAACpD,SAAb,CAAuBI,OAAvB,GAAiCf,KAAK,CAACkE,SAAN,CAAgB,EAAhB,CAAjC;AAEA;;;;;;;;;AAQAH,IAAAA,YAAY,CAAClD,MAAb,GAAsB,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AAChD,aAAO,IAAIyD,YAAJ,CAAiBzD,UAAjB,CAAP;AACD,KAFD;AAIA;;;;;;;;;;;AASAyD,IAAAA,YAAY,CAACjD,MAAb,GAAsB,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AACrD,UAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,UAAIE,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,OAAtC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACiD,KAAvD;AACF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,QAAtC,EAA0CC,KAA1C,CAAgDJ,OAAO,CAACkD,EAAxD;AACF,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,QAAtC,EAA0CiD,KAA1C,CAAgDpD,OAAO,CAACA,OAAxD;AACF,aAAOC,MAAP;AACD,KATD;AAWA;;;;;;;;;;;AASA+C,IAAAA,YAAY,CAAC3C,eAAb,GAA+B,SAASA,eAAT,CAAyBL,OAAzB,EAAkCC,MAAlC,EAA0C;AACvE,aAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,KAFD;AAIA;;;;;;;;;;;;;AAWA0C,IAAAA,YAAY,CAACzC,MAAb,GAAsB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AACpD,UAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,UAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,UACEK,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAe2D,YAAnB,EADZ;;AAEA,aAAOxC,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,YAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,gBAAQU,GAAG,KAAK,CAAhB;AACE,eAAK,CAAL;AACEb,YAAAA,OAAO,CAACiD,KAAR,GAAgBzC,MAAM,CAACJ,KAAP,EAAhB;AACA;;AACF,eAAK,CAAL;AACEJ,YAAAA,OAAO,CAACkD,EAAR,GAAa1C,MAAM,CAACJ,KAAP,EAAb;AACA;;AACF,eAAK,CAAL;AACEJ,YAAAA,OAAO,CAACA,OAAR,GAAkBQ,MAAM,CAAC4C,KAAP,EAAlB;AACA;;AACF;AACE5C,YAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAZJ;AAcD;;AACD,aAAOb,OAAP;AACD,KAtBD;AAwBA;;;;;;;;;;;;AAUAgD,IAAAA,YAAY,CAACjC,eAAb,GAA+B,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AAC9D,UAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,aAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,KAHD;AAKA;;;;;;;;;;AAQA6C,IAAAA,YAAY,CAAChC,MAAb,GAAsB,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AAC7C,UAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,UAAIA,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACE,QAAQF,OAAO,CAACiD,KAAhB;AACE;AACE,iBAAO,4BAAP;;AACF,aAAK,CAAL;AACA,aAAK,CAAL;AACE;AALJ;AAOF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACE,IAAI,CAACjB,KAAK,CAACgC,SAAN,CAAgBjB,OAAO,CAACkD,EAAxB,CAAL,EAAkC,OAAO,sBAAP;AACpC,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACE,IACE,EACGF,OAAO,CAACA,OAAR,IAAmB,OAAOA,OAAO,CAACA,OAAR,CAAgBL,MAAvB,KAAkC,QAAtD,IACAV,KAAK,CAAC4C,QAAN,CAAe7B,OAAO,CAACA,OAAvB,CAFF,CADF,EAME,OAAO,0BAAP;AACJ,aAAO,IAAP;AACD,KAtBD;AAwBA;;;;;;;;;;AAQAgD,IAAAA,YAAY,CAAC9B,UAAb,GAA0B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACpD,UAAIA,MAAM,YAAYhC,KAAK,CAACE,QAAN,CAAe2D,YAArC,EAAmD,OAAO7B,MAAP;AACnD,UAAInB,OAAO,GAAG,IAAIb,KAAK,CAACE,QAAN,CAAe2D,YAAnB,EAAd;;AACA,cAAQ7B,MAAM,CAAC8B,KAAf;AACE,aAAK,UAAL;AACA,aAAK,CAAL;AACEjD,UAAAA,OAAO,CAACiD,KAAR,GAAgB,CAAhB;AACA;;AACF,aAAK,UAAL;AACA,aAAK,CAAL;AACEjD,UAAAA,OAAO,CAACiD,KAAR,GAAgB,CAAhB;AACA;AARJ;;AAUA,UAAI9B,MAAM,CAAC+B,EAAP,IAAa,IAAjB,EAAuBlD,OAAO,CAACkD,EAAR,GAAa/B,MAAM,CAAC+B,EAAP,GAAY,CAAzB;AACvB,UAAI/B,MAAM,CAACnB,OAAP,IAAkB,IAAtB,EACE,IAAI,OAAOmB,MAAM,CAACnB,OAAd,KAA0B,QAA9B,EACEf,KAAK,CAACoE,MAAN,CAAa9C,MAAb,CACEY,MAAM,CAACnB,OADT,EAEGA,OAAO,CAACA,OAAR,GAAkBf,KAAK,CAACkE,SAAN,CACjBlE,KAAK,CAACoE,MAAN,CAAa1D,MAAb,CAAoBwB,MAAM,CAACnB,OAA3B,CADiB,CAFrB,EAKE,CALF,EADF,KAQK,IAAImB,MAAM,CAACnB,OAAP,CAAeL,MAAnB,EAA2BK,OAAO,CAACA,OAAR,GAAkBmB,MAAM,CAACnB,OAAzB;AAClC,aAAOA,OAAP;AACD,KAzBD;AA2BA;;;;;;;;;;;AASAgD,IAAAA,YAAY,CAAC5B,QAAb,GAAwB,SAASA,QAAT,CAAkBpB,OAAlB,EAA2BqB,OAA3B,EAAoC;AAC1D,UAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,UAAIF,MAAM,GAAG,EAAb;;AACA,UAAIE,OAAO,CAACC,QAAZ,EAAsB;AACpBH,QAAAA,MAAM,CAAC8B,KAAP,GAAe5B,OAAO,CAACiC,KAAR,KAAkBxB,MAAlB,GAA2B,UAA3B,GAAwC,CAAvD;AACAX,QAAAA,MAAM,CAAC+B,EAAP,GAAY,CAAZ;AACA,YAAI7B,OAAO,CAAC+B,KAAR,KAAkBtB,MAAtB,EAA8BX,MAAM,CAACnB,OAAP,GAAiB,EAAjB,CAA9B,KACK;AACHmB,UAAAA,MAAM,CAACnB,OAAP,GAAiB,EAAjB;AACA,cAAIqB,OAAO,CAAC+B,KAAR,KAAkBG,KAAtB,EACEpC,MAAM,CAACnB,OAAP,GAAiBf,KAAK,CAACkE,SAAN,CAAgBhC,MAAM,CAACnB,OAAvB,CAAjB;AACH;AACF;;AACD,UAAIA,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACEiB,MAAM,CAAC8B,KAAP,GACE5B,OAAO,CAACiC,KAAR,KAAkBxB,MAAlB,GACI3C,KAAK,CAACE,QAAN,CAAe2D,YAAf,CAA4BQ,SAA5B,CAAsCxD,OAAO,CAACiD,KAA9C,CADJ,GAEIjD,OAAO,CAACiD,KAHd;AAIF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACEiB,MAAM,CAAC+B,EAAP,GAAYlD,OAAO,CAACkD,EAApB;AACF,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACEiB,MAAM,CAACnB,OAAP,GACEqB,OAAO,CAAC+B,KAAR,KAAkBtB,MAAlB,GACI7C,KAAK,CAACoE,MAAN,CAAatD,MAAb,CAAoBC,OAAO,CAACA,OAA5B,EAAqC,CAArC,EAAwCA,OAAO,CAACA,OAAR,CAAgBL,MAAxD,CADJ,GAEI0B,OAAO,CAAC+B,KAAR,KAAkBG,KAAlB,GACEA,KAAK,CAAC3D,SAAN,CAAgB6D,KAAhB,CAAsBpB,IAAtB,CAA2BrC,OAAO,CAACA,OAAnC,CADF,GAEEA,OAAO,CAACA,OALhB;AAMF,aAAOmB,MAAP;AACD,KA5BD;AA8BA;;;;;;;;;AAOA6B,IAAAA,YAAY,CAACpD,SAAb,CAAuB2B,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAChD,aAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,KAFD;AAIA;;;;;;;;;AAOAuB,IAAAA,YAAY,CAACQ,SAAb,GAA0B,YAAW;AACnC,UAAIE,UAAU,GAAG,EAAjB;AAAA,UACEC,MAAM,GAAGlE,MAAM,CAACK,MAAP,CAAc4D,UAAd,CADX;AAEAC,MAAAA,MAAM,CAAED,UAAU,CAAC,CAAD,CAAV,GAAgB,UAAlB,CAAN,GAAuC,CAAvC;AACAC,MAAAA,MAAM,CAAED,UAAU,CAAC,CAAD,CAAV,GAAgB,UAAlB,CAAN,GAAuC,CAAvC;AACA,aAAOC,MAAP;AACD,KANwB,EAAzB;;AAQA,WAAOX,YAAP;AACD,GApRuB,EAAxB;;AAsRA,SAAO3D,QAAP;AACD,CA7wBgB,EAAjB;;AA+wBAF,KAAK,CAACwD,MAAN,GAAgB,YAAW;AACzB;;;;;AAKA,MAAIA,MAAM,GAAG,EAAb;;AAEAA,EAAAA,MAAM,CAACC,QAAP,GAAmB,YAAW;AAC5B;;;;;AAKA,QAAIA,QAAQ,GAAG,EAAf;;AAEAA,IAAAA,QAAQ,CAACC,KAAT,GAAkB,YAAW;AAC3B;;;;;;AAMA;;;;;;;;AAQA,eAASA,KAAT,CAAetD,UAAf,EAA2B;AACzB,YAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,cAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;;;AAQAmD,MAAAA,KAAK,CAAC/C,MAAN,GAAe,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AACzC,eAAO,IAAIsD,KAAJ,CAAUtD,UAAV,CAAP;AACD,OAFD;AAIA;;;;;;;;;;;AASAsD,MAAAA,KAAK,CAAC9C,MAAN,GAAe,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AAC9C,YAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,eAAOG,MAAP;AACD,OAHD;AAKA;;;;;;;;;;;AASA4C,MAAAA,KAAK,CAACxC,eAAN,GAAwB,SAASA,eAAT,CAAyBL,OAAzB,EAAkCC,MAAlC,EAA0C;AAChE,eAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,OAFD;AAIA;;;;;;;;;;;;;AAWAuC,MAAAA,KAAK,CAACtC,MAAN,GAAe,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AAC7C,YAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,YAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,YACEK,OAAO,GAAG,IAAIb,KAAK,CAACwD,MAAN,CAAaC,QAAb,CAAsBC,KAA1B,EADZ;;AAEA,eAAOrC,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,cAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,kBAAQU,GAAG,KAAK,CAAhB;AACE;AACEL,cAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAHJ;AAKD;;AACD,eAAOb,OAAP;AACD,OAbD;AAeA;;;;;;;;;;;;AAUA6C,MAAAA,KAAK,CAAC9B,eAAN,GAAwB,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AACvD,YAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,eAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,OAHD;AAKA;;;;;;;;;;AAQA0C,MAAAA,KAAK,CAAC7B,MAAN,GAAe,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AACtC,YAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,eAAO,IAAP;AACD,OAJD;AAMA;;;;;;;;;;AAQA6C,MAAAA,KAAK,CAAC3B,UAAN,GAAmB,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC7C,YAAIA,MAAM,YAAYhC,KAAK,CAACwD,MAAN,CAAaC,QAAb,CAAsBC,KAA5C,EAAmD,OAAO1B,MAAP;AACnD,eAAO,IAAIhC,KAAK,CAACwD,MAAN,CAAaC,QAAb,CAAsBC,KAA1B,EAAP;AACD,OAHD;AAKA;;;;;;;;;;;AASAA,MAAAA,KAAK,CAACzB,QAAN,GAAiB,SAASA,QAAT,GAAoB;AACnC,eAAO,EAAP;AACD,OAFD;AAIA;;;;;;;;;AAOAyB,MAAAA,KAAK,CAACjD,SAAN,CAAgB2B,MAAhB,GAAyB,SAASA,MAAT,GAAkB;AACzC,eAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,OAFD;;AAIA,aAAOoB,KAAP;AACD,KAzJgB,EAAjB;;AA2JA,WAAOD,QAAP;AACD,GApKiB,EAAlB;;AAsKA,SAAOD,MAAP;AACD,CA/Kc,EAAf;;AAiLAxD,KAAK,CAACyE,MAAN,GAAgB,YAAW;AACzB;;;;;AAKA,MAAIA,MAAM,GAAG,EAAb;;AAEAA,EAAAA,MAAM,CAACC,QAAP,GAAmB,YAAW;AAC5B;;;;;;;AAOA;;;;;;;;AAQA,aAASA,QAAT,CAAkBtE,UAAlB,EAA8B;AAC5B,UAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,YAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;AAMAmE,IAAAA,QAAQ,CAACjE,SAAT,CAAmBC,OAAnB,GAA6B,CAA7B;AAEA;;;;;;;;;AAQAgE,IAAAA,QAAQ,CAAC/D,MAAT,GAAkB,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AAC5C,aAAO,IAAIsE,QAAJ,CAAatE,UAAb,CAAP;AACD,KAFD;AAIA;;;;;;;;;;;AASAsE,IAAAA,QAAQ,CAAC9D,MAAT,GAAkB,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AACjD,UAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,UAAIE,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,OAAtC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACH,OAAvD;AACF,aAAOI,MAAP;AACD,KALD;AAOA;;;;;;;;;;;AASA4D,IAAAA,QAAQ,CAACxD,eAAT,GAA2B,SAASA,eAAT,CAAyBL,OAAzB,EAAkCC,MAAlC,EAA0C;AACnE,aAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,KAFD;AAIA;;;;;;;;;;;;;AAWAuD,IAAAA,QAAQ,CAACtD,MAAT,GAAkB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AAChD,UAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,UAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,UACEK,OAAO,GAAG,IAAIb,KAAK,CAACyE,MAAN,CAAaC,QAAjB,EADZ;;AAEA,aAAOrD,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,YAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,gBAAQU,GAAG,KAAK,CAAhB;AACE,eAAK,CAAL;AACEb,YAAAA,OAAO,CAACH,OAAR,GAAkBW,MAAM,CAACJ,KAAP,EAAlB;AACA;;AACF;AACEI,YAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AANJ;AAQD;;AACD,aAAOb,OAAP;AACD,KAhBD;AAkBA;;;;;;;;;;;;AAUA6D,IAAAA,QAAQ,CAAC9C,eAAT,GAA2B,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AAC1D,UAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,aAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,KAHD;AAKA;;;;;;;;;;AAQA0D,IAAAA,QAAQ,CAAC7C,MAAT,GAAkB,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AACzC,UAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,UAAIA,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACE,IAAI,CAACjB,KAAK,CAACgC,SAAN,CAAgBjB,OAAO,CAACH,OAAxB,CAAL,EACE,OAAO,2BAAP;AACJ,aAAO,IAAP;AACD,KAPD;AASA;;;;;;;;;;AAQAgE,IAAAA,QAAQ,CAAC3C,UAAT,GAAsB,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAChD,UAAIA,MAAM,YAAYhC,KAAK,CAACyE,MAAN,CAAaC,QAAnC,EAA6C,OAAO1C,MAAP;AAC7C,UAAInB,OAAO,GAAG,IAAIb,KAAK,CAACyE,MAAN,CAAaC,QAAjB,EAAd;AACA,UAAI1C,MAAM,CAACtB,OAAP,IAAkB,IAAtB,EAA4BG,OAAO,CAACH,OAAR,GAAkBsB,MAAM,CAACtB,OAAP,GAAiB,CAAnC;AAC5B,aAAOG,OAAP;AACD,KALD;AAOA;;;;;;;;;;;AASA6D,IAAAA,QAAQ,CAACzC,QAAT,GAAoB,SAASA,QAAT,CAAkBpB,OAAlB,EAA2BqB,OAA3B,EAAoC;AACtD,UAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,UAAIF,MAAM,GAAG,EAAb;AACA,UAAIE,OAAO,CAACC,QAAZ,EAAsBH,MAAM,CAACtB,OAAP,GAAiB,CAAjB;AACtB,UAAIG,OAAO,CAACH,OAAR,IAAmB,IAAnB,IAA2BG,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACEiB,MAAM,CAACtB,OAAP,GAAiBG,OAAO,CAACH,OAAzB;AACF,aAAOsB,MAAP;AACD,KAPD;AASA;;;;;;;;;AAOA0C,IAAAA,QAAQ,CAACjE,SAAT,CAAmB2B,MAAnB,GAA4B,SAASA,MAAT,GAAkB;AAC5C,aAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,KAFD;;AAIA,WAAOoC,QAAP;AACD,GAjLiB,EAAlB;;AAmLAD,EAAAA,MAAM,CAACZ,YAAP,GAAuB,YAAW;AAChC;;;;;;;;;AASA;;;;;;;;AAQA,aAASA,YAAT,CAAsBzD,UAAtB,EAAkC;AAChC,UAAIA,UAAJ,EACE,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE;AACE,YAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EAAiC,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AADnC;AAEH;AAED;;;;;;;;AAMAsD,IAAAA,YAAY,CAACpD,SAAb,CAAuBqD,KAAvB,GAA+B,CAA/B;AAEA;;;;;;;AAMAD,IAAAA,YAAY,CAACpD,SAAb,CAAuBsD,EAAvB,GAA4B,CAA5B;AAEA;;;;;;;AAMAF,IAAAA,YAAY,CAACpD,SAAb,CAAuBI,OAAvB,GAAiCf,KAAK,CAACkE,SAAN,CAAgB,EAAhB,CAAjC;AAEA;;;;;;;;;AAQAH,IAAAA,YAAY,CAAClD,MAAb,GAAsB,SAASA,MAAT,CAAgBP,UAAhB,EAA4B;AAChD,aAAO,IAAIyD,YAAJ,CAAiBzD,UAAjB,CAAP;AACD,KAFD;AAIA;;;;;;;;;;;AASAyD,IAAAA,YAAY,CAACjD,MAAb,GAAsB,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AACrD,UAAI,CAACA,MAAL,EAAaA,MAAM,GAAGlB,OAAO,CAACe,MAAR,EAAT;AACb,UAAIE,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,OAAtC,EAAyCC,KAAzC,CAA+CJ,OAAO,CAACiD,KAAvD;AACF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,QAAtC,EAA0CC,KAA1C,CAAgDJ,OAAO,CAACkD,EAAxD;AACF,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACED,MAAM,CAACE,MAAP;AAAc;AAAwB,QAAtC,EAA0CiD,KAA1C,CAAgDpD,OAAO,CAACA,OAAxD;AACF,aAAOC,MAAP;AACD,KATD;AAWA;;;;;;;;;;;AASA+C,IAAAA,YAAY,CAAC3C,eAAb,GAA+B,SAASA,eAAT,CAAyBL,OAAzB,EAAkCC,MAAlC,EAA0C;AACvE,aAAO,KAAKF,MAAL,CAAYC,OAAZ,EAAqBC,MAArB,EAA6BK,MAA7B,EAAP;AACD,KAFD;AAIA;;;;;;;;;;;;;AAWA0C,IAAAA,YAAY,CAACzC,MAAb,GAAsB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBb,MAAxB,EAAgC;AACpD,UAAI,EAAEa,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG3B,OAAO,CAACiB,MAAR,CAAeU,MAAf,CAAT;AAClC,UAAIC,GAAG,GAAGd,MAAM,KAAKe,SAAX,GAAuBF,MAAM,CAACG,GAA9B,GAAoCH,MAAM,CAACI,GAAP,GAAajB,MAA3D;AAAA,UACEK,OAAO,GAAG,IAAIb,KAAK,CAACyE,MAAN,CAAaZ,YAAjB,EADZ;;AAEA,aAAOxC,MAAM,CAACI,GAAP,GAAaH,GAApB,EAAyB;AACvB,YAAII,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAV;;AACA,gBAAQU,GAAG,KAAK,CAAhB;AACE,eAAK,CAAL;AACEb,YAAAA,OAAO,CAACiD,KAAR,GAAgBzC,MAAM,CAACJ,KAAP,EAAhB;AACA;;AACF,eAAK,CAAL;AACEJ,YAAAA,OAAO,CAACkD,EAAR,GAAa1C,MAAM,CAACJ,KAAP,EAAb;AACA;;AACF,eAAK,CAAL;AACEJ,YAAAA,OAAO,CAACA,OAAR,GAAkBQ,MAAM,CAAC4C,KAAP,EAAlB;AACA;;AACF;AACE5C,YAAAA,MAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAZJ;AAcD;;AACD,aAAOb,OAAP;AACD,KAtBD;AAwBA;;;;;;;;;;;;AAUAgD,IAAAA,YAAY,CAACjC,eAAb,GAA+B,SAASA,eAAT,CAAyBP,MAAzB,EAAiC;AAC9D,UAAI,EAAEA,MAAM,YAAY3B,OAApB,CAAJ,EAAkC2B,MAAM,GAAG,IAAI3B,OAAJ,CAAY2B,MAAZ,CAAT;AAClC,aAAO,KAAKD,MAAL,CAAYC,MAAZ,EAAoBA,MAAM,CAACL,MAAP,EAApB,CAAP;AACD,KAHD;AAKA;;;;;;;;;;AAQA6C,IAAAA,YAAY,CAAChC,MAAb,GAAsB,SAASA,MAAT,CAAgBhB,OAAhB,EAAyB;AAC7C,UAAI,QAAOA,OAAP,MAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,OAAO,iBAAP;AACF,UAAIA,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACE,QAAQF,OAAO,CAACiD,KAAhB;AACE;AACE,iBAAO,4BAAP;;AACF,aAAK,CAAL;AACE;AAJJ;AAMF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACE,IAAI,CAACjB,KAAK,CAACgC,SAAN,CAAgBjB,OAAO,CAACkD,EAAxB,CAAL,EAAkC,OAAO,sBAAP;AACpC,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACE,IACE,EACGF,OAAO,CAACA,OAAR,IAAmB,OAAOA,OAAO,CAACA,OAAR,CAAgBL,MAAvB,KAAkC,QAAtD,IACAV,KAAK,CAAC4C,QAAN,CAAe7B,OAAO,CAACA,OAAvB,CAFF,CADF,EAME,OAAO,0BAAP;AACJ,aAAO,IAAP;AACD,KArBD;AAuBA;;;;;;;;;;AAQAgD,IAAAA,YAAY,CAAC9B,UAAb,GAA0B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACpD,UAAIA,MAAM,YAAYhC,KAAK,CAACyE,MAAN,CAAaZ,YAAnC,EAAiD,OAAO7B,MAAP;AACjD,UAAInB,OAAO,GAAG,IAAIb,KAAK,CAACyE,MAAN,CAAaZ,YAAjB,EAAd;;AACA,cAAQ7B,MAAM,CAAC8B,KAAf;AACE,aAAK,UAAL;AACA,aAAK,CAAL;AACEjD,UAAAA,OAAO,CAACiD,KAAR,GAAgB,CAAhB;AACA;AAJJ;;AAMA,UAAI9B,MAAM,CAAC+B,EAAP,IAAa,IAAjB,EAAuBlD,OAAO,CAACkD,EAAR,GAAa/B,MAAM,CAAC+B,EAAP,GAAY,CAAzB;AACvB,UAAI/B,MAAM,CAACnB,OAAP,IAAkB,IAAtB,EACE,IAAI,OAAOmB,MAAM,CAACnB,OAAd,KAA0B,QAA9B,EACEf,KAAK,CAACoE,MAAN,CAAa9C,MAAb,CACEY,MAAM,CAACnB,OADT,EAEGA,OAAO,CAACA,OAAR,GAAkBf,KAAK,CAACkE,SAAN,CACjBlE,KAAK,CAACoE,MAAN,CAAa1D,MAAb,CAAoBwB,MAAM,CAACnB,OAA3B,CADiB,CAFrB,EAKE,CALF,EADF,KAQK,IAAImB,MAAM,CAACnB,OAAP,CAAeL,MAAnB,EAA2BK,OAAO,CAACA,OAAR,GAAkBmB,MAAM,CAACnB,OAAzB;AAClC,aAAOA,OAAP;AACD,KArBD;AAuBA;;;;;;;;;;;AASAgD,IAAAA,YAAY,CAAC5B,QAAb,GAAwB,SAASA,QAAT,CAAkBpB,OAAlB,EAA2BqB,OAA3B,EAAoC;AAC1D,UAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,UAAIF,MAAM,GAAG,EAAb;;AACA,UAAIE,OAAO,CAACC,QAAZ,EAAsB;AACpBH,QAAAA,MAAM,CAAC8B,KAAP,GAAe5B,OAAO,CAACiC,KAAR,KAAkBxB,MAAlB,GAA2B,UAA3B,GAAwC,CAAvD;AACAX,QAAAA,MAAM,CAAC+B,EAAP,GAAY,CAAZ;AACA,YAAI7B,OAAO,CAAC+B,KAAR,KAAkBtB,MAAtB,EAA8BX,MAAM,CAACnB,OAAP,GAAiB,EAAjB,CAA9B,KACK;AACHmB,UAAAA,MAAM,CAACnB,OAAP,GAAiB,EAAjB;AACA,cAAIqB,OAAO,CAAC+B,KAAR,KAAkBG,KAAtB,EACEpC,MAAM,CAACnB,OAAP,GAAiBf,KAAK,CAACkE,SAAN,CAAgBhC,MAAM,CAACnB,OAAvB,CAAjB;AACH;AACF;;AACD,UAAIA,OAAO,CAACiD,KAAR,IAAiB,IAAjB,IAAyBjD,OAAO,CAACE,cAAR,CAAuB,OAAvB,CAA7B,EACEiB,MAAM,CAAC8B,KAAP,GACE5B,OAAO,CAACiC,KAAR,KAAkBxB,MAAlB,GACI3C,KAAK,CAACyE,MAAN,CAAaZ,YAAb,CAA0BQ,SAA1B,CAAoCxD,OAAO,CAACiD,KAA5C,CADJ,GAEIjD,OAAO,CAACiD,KAHd;AAIF,UAAIjD,OAAO,CAACkD,EAAR,IAAc,IAAd,IAAsBlD,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAA1B,EACEiB,MAAM,CAAC+B,EAAP,GAAYlD,OAAO,CAACkD,EAApB;AACF,UAAIlD,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACE,cAAR,CAAuB,SAAvB,CAA/B,EACEiB,MAAM,CAACnB,OAAP,GACEqB,OAAO,CAAC+B,KAAR,KAAkBtB,MAAlB,GACI7C,KAAK,CAACoE,MAAN,CAAatD,MAAb,CAAoBC,OAAO,CAACA,OAA5B,EAAqC,CAArC,EAAwCA,OAAO,CAACA,OAAR,CAAgBL,MAAxD,CADJ,GAEI0B,OAAO,CAAC+B,KAAR,KAAkBG,KAAlB,GACEA,KAAK,CAAC3D,SAAN,CAAgB6D,KAAhB,CAAsBpB,IAAtB,CAA2BrC,OAAO,CAACA,OAAnC,CADF,GAEEA,OAAO,CAACA,OALhB;AAMF,aAAOmB,MAAP;AACD,KA5BD;AA8BA;;;;;;;;;AAOA6B,IAAAA,YAAY,CAACpD,SAAb,CAAuB2B,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAChD,aAAO,KAAKC,WAAL,CAAiBJ,QAAjB,CAA0B,IAA1B,EAAgCzC,SAAS,CAACO,IAAV,CAAeuC,aAA/C,CAAP;AACD,KAFD;AAIA;;;;;;;;AAMAuB,IAAAA,YAAY,CAACQ,SAAb,GAA0B,YAAW;AACnC,UAAIE,UAAU,GAAG,EAAjB;AAAA,UACEC,MAAM,GAAGlE,MAAM,CAACK,MAAP,CAAc4D,UAAd,CADX;AAEAC,MAAAA,MAAM,CAAED,UAAU,CAAC,CAAD,CAAV,GAAgB,UAAlB,CAAN,GAAuC,CAAvC;AACA,aAAOC,MAAP;AACD,KALwB,EAAzB;;AAOA,WAAOX,YAAP;AACD,GA7QqB,EAAtB;;AA+QA,SAAOY,MAAP;AACD,CA3cc,EAAf;;AA6cAE,MAAM,CAACC,OAAP,GAAiB5E,KAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC15CA,IAAA,WAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,SAAe,SAAf,GAAwB;;;;AAChB,MAAA,SAAS,GAAG,mBAAC,OAAD,EAA8B;AAC9C,YAAM,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,WAAA,CAAA,MAAf,EAAuB,IAAvB,CACZ,UAAC,EAAD,EAAa;cAAX,IAAA,GAAA,EAAA,CAAA,CAAA;cAAM,IAAA,GAAA,EAAA,CAAA,CAAA;AAAU,iBAAA,IAAI,KAAK,OAAO,CAAC,WAAjB;AAA4B,SADlC,CAAd;AAGA,YAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,EAAN,CAJkC,CAM9C;;AACA,YAAM,OAAO,GAAkC,WAAA,CAAA,MAAA,CAAO,YAAP,CAC5C,SAD4C,CAClC,KAAK,CAAC,CAAD,CAD6B,CAA/C;AAGA,eAAO,WAAA,CAAA,MAAA,CAAO,YAAP,CAAoB,MAApB,CAA2B;AAChC,UAAA,KAAK,EAAE,OADyB;AAEhC,UAAA,OAAO,EAAE,OAAO,CAAC,WAAR,CAAoB,MAApB,CAA2B,OAA3B,EAAoC,MAApC;AAFuB,SAA3B,CAAP;AAID,OAdK;;AAgBA,MAAA,WAAW,GAAG,qBAAC,EAAD,EAAwC;YAArC,KAAA,GAAA,EAAA,CAAA;YAAO,OAAA,GAAA,EAAA,CAAA;AAC5B,YAAM,SAAS,GAAG,WAAA,CAAA,MAAA,CAAO,YAAP,CAAoB,SAApB,CAA8B,KAA9B,CAAlB;AACA,YAAM,IAAI,GAAG,WAAA,CAAA,MAAA,CAAO,SAAP,CAAb;AAEA,YAAI,CAAC,IAAD,IAAS,OAAO,IAAI,CAAC,MAAZ,KAAuB,UAApC,EAAgD,MAAM,IAAI,KAAJ,EAAN;AAEhD,eAAO,IAAI,CAAC,MAAL,CAAY,OAAZ,CAAP;AACD,OAPK;;AASA,MAAA,EAAE,GAAG,YACT,KADS,EAET,QAFS,EAEkE,CACtE,CAHD;;AAKN,MAAA,EAAE,CAAC,WAAA,CAAA,MAAA,CAAO,QAAR,EAAkB,UAAC,IAAD,EAAO,YAAP,EAAmB,CAAO,CAA5C,CAAF;AAEM,MAAA,QAAQ,GAAG,WAAA,CAAA,MAAA,CAAO,QAAP,CAAgB,MAAhB,CAAuB;AAAE,QAAA,OAAO,EAAE;AAAX,OAAvB,CAAX;AAEA,MAAA,OAAO,GAAG,SAAS,CAAC,QAAD,CAAnB;AAEA,MAAA,OAAO,GAAG,WAAA,CAAA,MAAA,CAAO,YAAP,CAAoB,MAApB,CAA2B,OAA3B,EAAoC,MAApC,EAAV;AAEA,MAAA,OAAO,GAAG,WAAW,CAAC,WAAA,CAAA,MAAA,CAAO,YAAP,CAAoB,MAApB,CAA2B,OAA3B,CAAD,CAArB;AAEN,MAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,OAArB;AACM,MAAA,OAAO,GAAG,WAAA,CAAA,QAAA,CAAS,QAAT,CAAkB,MAAlB,CAAyB,UAAC,MAAD,EAAS,WAAT,EAAsB,QAAtB,EAA8B;AACrE,YAAM,OAAO,GAAG,WAAA,CAAA,QAAA,CAAS,YAAT,CAAsB,SAAtB,CAAgC,MAAM,CAAC,IAAvC,CAAhB;AAEA,YAAM,OAAO,GAAG,WAAA,CAAA,QAAA,CAAS,YAAT,CAAsB,MAAtB,CAA6B;AAC3C,UAAA,KAAK,EAAE,OADoC;AAE3C,UAAA,OAAO,EAAE;AAFkC,SAA7B,CAAhB,CAHqE,CAQrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAhBe,CAAV;AAkBN,MAAA,OAAO,CAAC,QAAR,CAAiB;AACf,QAAA,IAAI,EAAE;AADS,OAAjB;;;;;;AASD;;AAED,SAAS","file":"demo.77de5100.map","sourceRoot":"../demo","sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n'use strict'\n\nvar $protobuf = require('protobufjs/minimal')\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nvar $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {})\n\n$root.commands = (function() {\n  /**\n   * Namespace commands.\n   * @exports commands\n   * @namespace\n   */\n  var commands = {}\n\n  commands.PressKeyRequest = (function() {\n    /**\n     * Properties of a PressKeyRequest.\n     * @memberof commands\n     * @interface IPressKeyRequest\n     * @property {number|null} [keyCode] PressKeyRequest keyCode\n     */\n\n    /**\n     * Constructs a new PressKeyRequest.\n     * @memberof commands\n     * @classdesc Represents a PressKeyRequest.\n     * @implements IPressKeyRequest\n     * @constructor\n     * @param {commands.IPressKeyRequest=} [properties] Properties to set\n     */\n    function PressKeyRequest(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n    }\n\n    /**\n     * PressKeyRequest keyCode.\n     * @member {number} keyCode\n     * @memberof commands.PressKeyRequest\n     * @instance\n     */\n    PressKeyRequest.prototype.keyCode = 0\n\n    /**\n     * Creates a new PressKeyRequest instance using the specified properties.\n     * @function create\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {commands.IPressKeyRequest=} [properties] Properties to set\n     * @returns {commands.PressKeyRequest} PressKeyRequest instance\n     */\n    PressKeyRequest.create = function create(properties) {\n      return new PressKeyRequest(properties)\n    }\n\n    /**\n     * Encodes the specified PressKeyRequest message. Does not implicitly {@link commands.PressKeyRequest.verify|verify} messages.\n     * @function encode\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {commands.IPressKeyRequest} message PressKeyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PressKeyRequest.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create()\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.keyCode)\n      return writer\n    }\n\n    /**\n     * Encodes the specified PressKeyRequest message, length delimited. Does not implicitly {@link commands.PressKeyRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {commands.IPressKeyRequest} message PressKeyRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PressKeyRequest.encodeDelimited = function encodeDelimited(\n      message,\n      writer\n    ) {\n      return this.encode(message, writer).ldelim()\n    }\n\n    /**\n     * Decodes a PressKeyRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {commands.PressKeyRequest} PressKeyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PressKeyRequest.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.commands.PressKeyRequest()\n      while (reader.pos < end) {\n        var tag = reader.uint32()\n        switch (tag >>> 3) {\n          case 1:\n            message.keyCode = reader.int32()\n            break\n          default:\n            reader.skipType(tag & 7)\n            break\n        }\n      }\n      return message\n    }\n\n    /**\n     * Decodes a PressKeyRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {commands.PressKeyRequest} PressKeyRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PressKeyRequest.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n      return this.decode(reader, reader.uint32())\n    }\n\n    /**\n     * Verifies a PressKeyRequest message.\n     * @function verify\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PressKeyRequest.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null)\n        return 'object expected'\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        if (!$util.isInteger(message.keyCode))\n          return 'keyCode: integer expected'\n      return null\n    }\n\n    /**\n     * Creates a PressKeyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {commands.PressKeyRequest} PressKeyRequest\n     */\n    PressKeyRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.commands.PressKeyRequest) return object\n      var message = new $root.commands.PressKeyRequest()\n      if (object.keyCode != null) message.keyCode = object.keyCode | 0\n      return message\n    }\n\n    /**\n     * Creates a plain object from a PressKeyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof commands.PressKeyRequest\n     * @static\n     * @param {commands.PressKeyRequest} message PressKeyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PressKeyRequest.toObject = function toObject(message, options) {\n      if (!options) options = {}\n      var object = {}\n      if (options.defaults) object.keyCode = 0\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        object.keyCode = message.keyCode\n      return object\n    }\n\n    /**\n     * Converts this PressKeyRequest to JSON.\n     * @function toJSON\n     * @memberof commands.PressKeyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PressKeyRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n    }\n\n    return PressKeyRequest\n  })()\n\n  commands.TypeTextRequest = (function() {\n    /**\n     * Properties of a TypeTextRequest.\n     * @memberof commands\n     * @interface ITypeTextRequest\n     * @property {string|null} [text] TypeTextRequest text\n     */\n\n    /**\n     * Constructs a new TypeTextRequest.\n     * @memberof commands\n     * @classdesc Represents a TypeTextRequest.\n     * @implements ITypeTextRequest\n     * @constructor\n     * @param {commands.ITypeTextRequest=} [properties] Properties to set\n     */\n    function TypeTextRequest(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n    }\n\n    /**\n     * TypeTextRequest text.\n     * @member {string} text\n     * @memberof commands.TypeTextRequest\n     * @instance\n     */\n    TypeTextRequest.prototype.text = ''\n\n    /**\n     * Creates a new TypeTextRequest instance using the specified properties.\n     * @function create\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {commands.ITypeTextRequest=} [properties] Properties to set\n     * @returns {commands.TypeTextRequest} TypeTextRequest instance\n     */\n    TypeTextRequest.create = function create(properties) {\n      return new TypeTextRequest(properties)\n    }\n\n    /**\n     * Encodes the specified TypeTextRequest message. Does not implicitly {@link commands.TypeTextRequest.verify|verify} messages.\n     * @function encode\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {commands.ITypeTextRequest} message TypeTextRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeTextRequest.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create()\n      if (message.text != null && message.hasOwnProperty('text'))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.text)\n      return writer\n    }\n\n    /**\n     * Encodes the specified TypeTextRequest message, length delimited. Does not implicitly {@link commands.TypeTextRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {commands.ITypeTextRequest} message TypeTextRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeTextRequest.encodeDelimited = function encodeDelimited(\n      message,\n      writer\n    ) {\n      return this.encode(message, writer).ldelim()\n    }\n\n    /**\n     * Decodes a TypeTextRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {commands.TypeTextRequest} TypeTextRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeTextRequest.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.commands.TypeTextRequest()\n      while (reader.pos < end) {\n        var tag = reader.uint32()\n        switch (tag >>> 3) {\n          case 1:\n            message.text = reader.string()\n            break\n          default:\n            reader.skipType(tag & 7)\n            break\n        }\n      }\n      return message\n    }\n\n    /**\n     * Decodes a TypeTextRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {commands.TypeTextRequest} TypeTextRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeTextRequest.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n      return this.decode(reader, reader.uint32())\n    }\n\n    /**\n     * Verifies a TypeTextRequest message.\n     * @function verify\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeTextRequest.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null)\n        return 'object expected'\n      if (message.text != null && message.hasOwnProperty('text'))\n        if (!$util.isString(message.text)) return 'text: string expected'\n      return null\n    }\n\n    /**\n     * Creates a TypeTextRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {commands.TypeTextRequest} TypeTextRequest\n     */\n    TypeTextRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.commands.TypeTextRequest) return object\n      var message = new $root.commands.TypeTextRequest()\n      if (object.text != null) message.text = String(object.text)\n      return message\n    }\n\n    /**\n     * Creates a plain object from a TypeTextRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof commands.TypeTextRequest\n     * @static\n     * @param {commands.TypeTextRequest} message TypeTextRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeTextRequest.toObject = function toObject(message, options) {\n      if (!options) options = {}\n      var object = {}\n      if (options.defaults) object.text = ''\n      if (message.text != null && message.hasOwnProperty('text'))\n        object.text = message.text\n      return object\n    }\n\n    /**\n     * Converts this TypeTextRequest to JSON.\n     * @function toJSON\n     * @memberof commands.TypeTextRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeTextRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n    }\n\n    return TypeTextRequest\n  })()\n\n  commands.Commands = (function() {\n    /**\n     * Constructs a new Commands service.\n     * @memberof commands\n     * @classdesc Represents a Commands\n     * @extends $protobuf.rpc.Service\n     * @constructor\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     */\n    function Commands(rpcImpl, requestDelimited, responseDelimited) {\n      $protobuf.rpc.Service.call(\n        this,\n        rpcImpl,\n        requestDelimited,\n        responseDelimited\n      )\n    }\n\n    ;(Commands.prototype = Object.create(\n      $protobuf.rpc.Service.prototype\n    )).constructor = Commands\n\n    /**\n     * Creates new Commands service using the specified rpc implementation.\n     * @function create\n     * @memberof commands.Commands\n     * @static\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     * @returns {Commands} RPC service. Useful where requests and/or responses are streamed.\n     */\n    Commands.create = function create(\n      rpcImpl,\n      requestDelimited,\n      responseDelimited\n    ) {\n      return new this(rpcImpl, requestDelimited, responseDelimited)\n    }\n\n    /**\n     * Callback as used by {@link commands.Commands#pressKey}.\n     * @memberof commands.Commands\n     * @typedef PressKeyCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {google.protobuf.Empty} [response] Empty\n     */\n\n    /**\n     * Calls PressKey.\n     * @function pressKey\n     * @memberof commands.Commands\n     * @instance\n     * @param {commands.IPressKeyRequest} request PressKeyRequest message or plain object\n     * @param {commands.Commands.PressKeyCallback} callback Node-style callback called with the error, if any, and Empty\n     * @returns {undefined}\n     * @variation 1\n     */\n    Object.defineProperty(\n      (Commands.prototype.pressKey = function pressKey(request, callback) {\n        return this.rpcCall(\n          pressKey,\n          $root.commands.PressKeyRequest,\n          $root.google.protobuf.Empty,\n          request,\n          callback\n        )\n      }),\n      'name',\n      { value: 'PressKey' }\n    )\n\n    /**\n     * Calls PressKey.\n     * @function pressKey\n     * @memberof commands.Commands\n     * @instance\n     * @param {commands.IPressKeyRequest} request PressKeyRequest message or plain object\n     * @returns {Promise<google.protobuf.Empty>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link commands.Commands#typeText}.\n     * @memberof commands.Commands\n     * @typedef TypeTextCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {google.protobuf.Empty} [response] Empty\n     */\n\n    /**\n     * Calls TypeText.\n     * @function typeText\n     * @memberof commands.Commands\n     * @instance\n     * @param {commands.ITypeTextRequest} request TypeTextRequest message or plain object\n     * @param {commands.Commands.TypeTextCallback} callback Node-style callback called with the error, if any, and Empty\n     * @returns {undefined}\n     * @variation 1\n     */\n    Object.defineProperty(\n      (Commands.prototype.typeText = function typeText(request, callback) {\n        return this.rpcCall(\n          typeText,\n          $root.commands.TypeTextRequest,\n          $root.google.protobuf.Empty,\n          request,\n          callback\n        )\n      }),\n      'name',\n      { value: 'TypeText' }\n    )\n\n    /**\n     * Calls TypeText.\n     * @function typeText\n     * @memberof commands.Commands\n     * @instance\n     * @param {commands.ITypeTextRequest} request TypeTextRequest message or plain object\n     * @returns {Promise<google.protobuf.Empty>} Promise\n     * @variation 2\n     */\n\n    return Commands\n  })()\n\n  commands.MessageEvent = (function() {\n    /**\n     * Properties of a MessageEvent.\n     * @memberof commands\n     * @interface IMessageEvent\n     * @property {commands.MessageEvent.EventName|null} [event] MessageEvent event\n     * @property {number|null} [id] MessageEvent id\n     * @property {Uint8Array|null} [message] MessageEvent message\n     */\n\n    /**\n     * Constructs a new MessageEvent.\n     * @memberof commands\n     * @classdesc Represents a MessageEvent.\n     * @implements IMessageEvent\n     * @constructor\n     * @param {commands.IMessageEvent=} [properties] Properties to set\n     */\n    function MessageEvent(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n    }\n\n    /**\n     * MessageEvent event.\n     * @member {commands.MessageEvent.EventName} event\n     * @memberof commands.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.event = 1\n\n    /**\n     * MessageEvent id.\n     * @member {number} id\n     * @memberof commands.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.id = 0\n\n    /**\n     * MessageEvent message.\n     * @member {Uint8Array} message\n     * @memberof commands.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.message = $util.newBuffer([])\n\n    /**\n     * Creates a new MessageEvent instance using the specified properties.\n     * @function create\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {commands.IMessageEvent=} [properties] Properties to set\n     * @returns {commands.MessageEvent} MessageEvent instance\n     */\n    MessageEvent.create = function create(properties) {\n      return new MessageEvent(properties)\n    }\n\n    /**\n     * Encodes the specified MessageEvent message. Does not implicitly {@link commands.MessageEvent.verify|verify} messages.\n     * @function encode\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {commands.IMessageEvent} message MessageEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MessageEvent.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create()\n      if (message.event != null && message.hasOwnProperty('event'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.event)\n      if (message.id != null && message.hasOwnProperty('id'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.id)\n      if (message.message != null && message.hasOwnProperty('message'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.message)\n      return writer\n    }\n\n    /**\n     * Encodes the specified MessageEvent message, length delimited. Does not implicitly {@link commands.MessageEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {commands.IMessageEvent} message MessageEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MessageEvent.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim()\n    }\n\n    /**\n     * Decodes a MessageEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {commands.MessageEvent} MessageEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MessageEvent.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.commands.MessageEvent()\n      while (reader.pos < end) {\n        var tag = reader.uint32()\n        switch (tag >>> 3) {\n          case 1:\n            message.event = reader.int32()\n            break\n          case 2:\n            message.id = reader.int32()\n            break\n          case 3:\n            message.message = reader.bytes()\n            break\n          default:\n            reader.skipType(tag & 7)\n            break\n        }\n      }\n      return message\n    }\n\n    /**\n     * Decodes a MessageEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {commands.MessageEvent} MessageEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MessageEvent.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n      return this.decode(reader, reader.uint32())\n    }\n\n    /**\n     * Verifies a MessageEvent message.\n     * @function verify\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MessageEvent.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null)\n        return 'object expected'\n      if (message.event != null && message.hasOwnProperty('event'))\n        switch (message.event) {\n          default:\n            return 'event: enum value expected'\n          case 1:\n          case 2:\n            break\n        }\n      if (message.id != null && message.hasOwnProperty('id'))\n        if (!$util.isInteger(message.id)) return 'id: integer expected'\n      if (message.message != null && message.hasOwnProperty('message'))\n        if (\n          !(\n            (message.message && typeof message.message.length === 'number') ||\n            $util.isString(message.message)\n          )\n        )\n          return 'message: buffer expected'\n      return null\n    }\n\n    /**\n     * Creates a MessageEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {commands.MessageEvent} MessageEvent\n     */\n    MessageEvent.fromObject = function fromObject(object) {\n      if (object instanceof $root.commands.MessageEvent) return object\n      var message = new $root.commands.MessageEvent()\n      switch (object.event) {\n        case 'PressKey':\n        case 1:\n          message.event = 1\n          break\n        case 'TypeText':\n        case 2:\n          message.event = 2\n          break\n      }\n      if (object.id != null) message.id = object.id | 0\n      if (object.message != null)\n        if (typeof object.message === 'string')\n          $util.base64.decode(\n            object.message,\n            (message.message = $util.newBuffer(\n              $util.base64.length(object.message)\n            )),\n            0\n          )\n        else if (object.message.length) message.message = object.message\n      return message\n    }\n\n    /**\n     * Creates a plain object from a MessageEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof commands.MessageEvent\n     * @static\n     * @param {commands.MessageEvent} message MessageEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MessageEvent.toObject = function toObject(message, options) {\n      if (!options) options = {}\n      var object = {}\n      if (options.defaults) {\n        object.event = options.enums === String ? 'PressKey' : 1\n        object.id = 0\n        if (options.bytes === String) object.message = ''\n        else {\n          object.message = []\n          if (options.bytes !== Array)\n            object.message = $util.newBuffer(object.message)\n        }\n      }\n      if (message.event != null && message.hasOwnProperty('event'))\n        object.event =\n          options.enums === String\n            ? $root.commands.MessageEvent.EventName[message.event]\n            : message.event\n      if (message.id != null && message.hasOwnProperty('id'))\n        object.id = message.id\n      if (message.message != null && message.hasOwnProperty('message'))\n        object.message =\n          options.bytes === String\n            ? $util.base64.encode(message.message, 0, message.message.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.message)\n              : message.message\n      return object\n    }\n\n    /**\n     * Converts this MessageEvent to JSON.\n     * @function toJSON\n     * @memberof commands.MessageEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MessageEvent.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n    }\n\n    /**\n     * EventName enum.\n     * @name commands.MessageEvent.EventName\n     * @enum {string}\n     * @property {number} PressKey=1 PressKey value\n     * @property {number} TypeText=2 TypeText value\n     */\n    MessageEvent.EventName = (function() {\n      var valuesById = {},\n        values = Object.create(valuesById)\n      values[(valuesById[1] = 'PressKey')] = 1\n      values[(valuesById[2] = 'TypeText')] = 2\n      return values\n    })()\n\n    return MessageEvent\n  })()\n\n  return commands\n})()\n\n$root.google = (function() {\n  /**\n   * Namespace google.\n   * @exports google\n   * @namespace\n   */\n  var google = {}\n\n  google.protobuf = (function() {\n    /**\n     * Namespace protobuf.\n     * @memberof google\n     * @namespace\n     */\n    var protobuf = {}\n\n    protobuf.Empty = (function() {\n      /**\n       * Properties of an Empty.\n       * @memberof google.protobuf\n       * @interface IEmpty\n       */\n\n      /**\n       * Constructs a new Empty.\n       * @memberof google.protobuf\n       * @classdesc Represents an Empty.\n       * @implements IEmpty\n       * @constructor\n       * @param {google.protobuf.IEmpty=} [properties] Properties to set\n       */\n      function Empty(properties) {\n        if (properties)\n          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n      }\n\n      /**\n       * Creates a new Empty instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {google.protobuf.IEmpty=} [properties] Properties to set\n       * @returns {google.protobuf.Empty} Empty instance\n       */\n      Empty.create = function create(properties) {\n        return new Empty(properties)\n      }\n\n      /**\n       * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {google.protobuf.IEmpty} message Empty message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Empty.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create()\n        return writer\n      }\n\n      /**\n       * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {google.protobuf.IEmpty} message Empty message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Empty.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim()\n      }\n\n      /**\n       * Decodes an Empty message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Empty} Empty\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Empty.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.google.protobuf.Empty()\n        while (reader.pos < end) {\n          var tag = reader.uint32()\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n        return message\n      }\n\n      /**\n       * Decodes an Empty message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Empty} Empty\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Empty.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n        return this.decode(reader, reader.uint32())\n      }\n\n      /**\n       * Verifies an Empty message.\n       * @function verify\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Empty.verify = function verify(message) {\n        if (typeof message !== 'object' || message === null)\n          return 'object expected'\n        return null\n      }\n\n      /**\n       * Creates an Empty message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {google.protobuf.Empty} Empty\n       */\n      Empty.fromObject = function fromObject(object) {\n        if (object instanceof $root.google.protobuf.Empty) return object\n        return new $root.google.protobuf.Empty()\n      }\n\n      /**\n       * Creates a plain object from an Empty message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Empty\n       * @static\n       * @param {google.protobuf.Empty} message Empty\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Empty.toObject = function toObject() {\n        return {}\n      }\n\n      /**\n       * Converts this Empty to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Empty\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Empty.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n      }\n\n      return Empty\n    })()\n\n    return protobuf\n  })()\n\n  return google\n})()\n\n$root.events = (function() {\n  /**\n   * Namespace events.\n   * @exports events\n   * @namespace\n   */\n  var events = {}\n\n  events.KeyPress = (function() {\n    /**\n     * Properties of a KeyPress.\n     * @memberof events\n     * @interface IKeyPress\n     * @property {number|null} [keyCode] KeyPress keyCode\n     */\n\n    /**\n     * Constructs a new KeyPress.\n     * @memberof events\n     * @classdesc Represents a KeyPress.\n     * @implements IKeyPress\n     * @constructor\n     * @param {events.IKeyPress=} [properties] Properties to set\n     */\n    function KeyPress(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n    }\n\n    /**\n     * KeyPress keyCode.\n     * @member {number} keyCode\n     * @memberof events.KeyPress\n     * @instance\n     */\n    KeyPress.prototype.keyCode = 0\n\n    /**\n     * Creates a new KeyPress instance using the specified properties.\n     * @function create\n     * @memberof events.KeyPress\n     * @static\n     * @param {events.IKeyPress=} [properties] Properties to set\n     * @returns {events.KeyPress} KeyPress instance\n     */\n    KeyPress.create = function create(properties) {\n      return new KeyPress(properties)\n    }\n\n    /**\n     * Encodes the specified KeyPress message. Does not implicitly {@link events.KeyPress.verify|verify} messages.\n     * @function encode\n     * @memberof events.KeyPress\n     * @static\n     * @param {events.IKeyPress} message KeyPress message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyPress.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create()\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.keyCode)\n      return writer\n    }\n\n    /**\n     * Encodes the specified KeyPress message, length delimited. Does not implicitly {@link events.KeyPress.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof events.KeyPress\n     * @static\n     * @param {events.IKeyPress} message KeyPress message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyPress.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim()\n    }\n\n    /**\n     * Decodes a KeyPress message from the specified reader or buffer.\n     * @function decode\n     * @memberof events.KeyPress\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {events.KeyPress} KeyPress\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyPress.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.events.KeyPress()\n      while (reader.pos < end) {\n        var tag = reader.uint32()\n        switch (tag >>> 3) {\n          case 1:\n            message.keyCode = reader.int32()\n            break\n          default:\n            reader.skipType(tag & 7)\n            break\n        }\n      }\n      return message\n    }\n\n    /**\n     * Decodes a KeyPress message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof events.KeyPress\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {events.KeyPress} KeyPress\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyPress.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n      return this.decode(reader, reader.uint32())\n    }\n\n    /**\n     * Verifies a KeyPress message.\n     * @function verify\n     * @memberof events.KeyPress\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    KeyPress.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null)\n        return 'object expected'\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        if (!$util.isInteger(message.keyCode))\n          return 'keyCode: integer expected'\n      return null\n    }\n\n    /**\n     * Creates a KeyPress message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof events.KeyPress\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {events.KeyPress} KeyPress\n     */\n    KeyPress.fromObject = function fromObject(object) {\n      if (object instanceof $root.events.KeyPress) return object\n      var message = new $root.events.KeyPress()\n      if (object.keyCode != null) message.keyCode = object.keyCode | 0\n      return message\n    }\n\n    /**\n     * Creates a plain object from a KeyPress message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof events.KeyPress\n     * @static\n     * @param {events.KeyPress} message KeyPress\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    KeyPress.toObject = function toObject(message, options) {\n      if (!options) options = {}\n      var object = {}\n      if (options.defaults) object.keyCode = 0\n      if (message.keyCode != null && message.hasOwnProperty('keyCode'))\n        object.keyCode = message.keyCode\n      return object\n    }\n\n    /**\n     * Converts this KeyPress to JSON.\n     * @function toJSON\n     * @memberof events.KeyPress\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    KeyPress.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n    }\n\n    return KeyPress\n  })()\n\n  events.MessageEvent = (function() {\n    /**\n     * Properties of a MessageEvent.\n     * @memberof events\n     * @interface IMessageEvent\n     * @property {events.MessageEvent.EventName|null} [event] MessageEvent event\n     * @property {number|null} [id] MessageEvent id\n     * @property {Uint8Array|null} [message] MessageEvent message\n     */\n\n    /**\n     * Constructs a new MessageEvent.\n     * @memberof events\n     * @classdesc Represents a MessageEvent.\n     * @implements IMessageEvent\n     * @constructor\n     * @param {events.IMessageEvent=} [properties] Properties to set\n     */\n    function MessageEvent(properties) {\n      if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n    }\n\n    /**\n     * MessageEvent event.\n     * @member {events.MessageEvent.EventName} event\n     * @memberof events.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.event = 1\n\n    /**\n     * MessageEvent id.\n     * @member {number} id\n     * @memberof events.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.id = 0\n\n    /**\n     * MessageEvent message.\n     * @member {Uint8Array} message\n     * @memberof events.MessageEvent\n     * @instance\n     */\n    MessageEvent.prototype.message = $util.newBuffer([])\n\n    /**\n     * Creates a new MessageEvent instance using the specified properties.\n     * @function create\n     * @memberof events.MessageEvent\n     * @static\n     * @param {events.IMessageEvent=} [properties] Properties to set\n     * @returns {events.MessageEvent} MessageEvent instance\n     */\n    MessageEvent.create = function create(properties) {\n      return new MessageEvent(properties)\n    }\n\n    /**\n     * Encodes the specified MessageEvent message. Does not implicitly {@link events.MessageEvent.verify|verify} messages.\n     * @function encode\n     * @memberof events.MessageEvent\n     * @static\n     * @param {events.IMessageEvent} message MessageEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MessageEvent.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create()\n      if (message.event != null && message.hasOwnProperty('event'))\n        writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.event)\n      if (message.id != null && message.hasOwnProperty('id'))\n        writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.id)\n      if (message.message != null && message.hasOwnProperty('message'))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.message)\n      return writer\n    }\n\n    /**\n     * Encodes the specified MessageEvent message, length delimited. Does not implicitly {@link events.MessageEvent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof events.MessageEvent\n     * @static\n     * @param {events.IMessageEvent} message MessageEvent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MessageEvent.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim()\n    }\n\n    /**\n     * Decodes a MessageEvent message from the specified reader or buffer.\n     * @function decode\n     * @memberof events.MessageEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {events.MessageEvent} MessageEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MessageEvent.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.events.MessageEvent()\n      while (reader.pos < end) {\n        var tag = reader.uint32()\n        switch (tag >>> 3) {\n          case 1:\n            message.event = reader.int32()\n            break\n          case 2:\n            message.id = reader.int32()\n            break\n          case 3:\n            message.message = reader.bytes()\n            break\n          default:\n            reader.skipType(tag & 7)\n            break\n        }\n      }\n      return message\n    }\n\n    /**\n     * Decodes a MessageEvent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof events.MessageEvent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {events.MessageEvent} MessageEvent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MessageEvent.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n      return this.decode(reader, reader.uint32())\n    }\n\n    /**\n     * Verifies a MessageEvent message.\n     * @function verify\n     * @memberof events.MessageEvent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MessageEvent.verify = function verify(message) {\n      if (typeof message !== 'object' || message === null)\n        return 'object expected'\n      if (message.event != null && message.hasOwnProperty('event'))\n        switch (message.event) {\n          default:\n            return 'event: enum value expected'\n          case 1:\n            break\n        }\n      if (message.id != null && message.hasOwnProperty('id'))\n        if (!$util.isInteger(message.id)) return 'id: integer expected'\n      if (message.message != null && message.hasOwnProperty('message'))\n        if (\n          !(\n            (message.message && typeof message.message.length === 'number') ||\n            $util.isString(message.message)\n          )\n        )\n          return 'message: buffer expected'\n      return null\n    }\n\n    /**\n     * Creates a MessageEvent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof events.MessageEvent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {events.MessageEvent} MessageEvent\n     */\n    MessageEvent.fromObject = function fromObject(object) {\n      if (object instanceof $root.events.MessageEvent) return object\n      var message = new $root.events.MessageEvent()\n      switch (object.event) {\n        case 'KeyPress':\n        case 1:\n          message.event = 1\n          break\n      }\n      if (object.id != null) message.id = object.id | 0\n      if (object.message != null)\n        if (typeof object.message === 'string')\n          $util.base64.decode(\n            object.message,\n            (message.message = $util.newBuffer(\n              $util.base64.length(object.message)\n            )),\n            0\n          )\n        else if (object.message.length) message.message = object.message\n      return message\n    }\n\n    /**\n     * Creates a plain object from a MessageEvent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof events.MessageEvent\n     * @static\n     * @param {events.MessageEvent} message MessageEvent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MessageEvent.toObject = function toObject(message, options) {\n      if (!options) options = {}\n      var object = {}\n      if (options.defaults) {\n        object.event = options.enums === String ? 'KeyPress' : 1\n        object.id = 0\n        if (options.bytes === String) object.message = ''\n        else {\n          object.message = []\n          if (options.bytes !== Array)\n            object.message = $util.newBuffer(object.message)\n        }\n      }\n      if (message.event != null && message.hasOwnProperty('event'))\n        object.event =\n          options.enums === String\n            ? $root.events.MessageEvent.EventName[message.event]\n            : message.event\n      if (message.id != null && message.hasOwnProperty('id'))\n        object.id = message.id\n      if (message.message != null && message.hasOwnProperty('message'))\n        object.message =\n          options.bytes === String\n            ? $util.base64.encode(message.message, 0, message.message.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.message)\n              : message.message\n      return object\n    }\n\n    /**\n     * Converts this MessageEvent to JSON.\n     * @function toJSON\n     * @memberof events.MessageEvent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MessageEvent.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n    }\n\n    /**\n     * EventName enum.\n     * @name events.MessageEvent.EventName\n     * @enum {string}\n     * @property {number} KeyPress=1 KeyPress value\n     */\n    MessageEvent.EventName = (function() {\n      var valuesById = {},\n        values = Object.create(valuesById)\n      values[(valuesById[1] = 'KeyPress')] = 1\n      return values\n    })()\n\n    return MessageEvent\n  })()\n\n  return events\n})()\n\nmodule.exports = $root\n","import { events, commands } from '../src/generated'\r\n\r\nasync function bootstrap() {\r\n  const packEvent = (message: { constructor: any }) => {\r\n    const event = Object.entries(events).find(\r\n      ([name, type]) => type === message.constructor\r\n    )\r\n    if (!event) throw new Error()\r\n\r\n    // console.log(message.constructor)\r\n    const eventId: events.MessageEvent.EventName = events.MessageEvent\r\n      .EventName[event[0]] as any\r\n\r\n    return events.MessageEvent.create({\r\n      event: eventId,\r\n      message: message.constructor.encode(message).finish(),\r\n    })\r\n  }\r\n\r\n  const unpackEvent = ({ event, message }: events.MessageEvent) => {\r\n    const eventName = events.MessageEvent.EventName[event]\r\n    const Type = events[eventName]\r\n\r\n    if (!Type || typeof Type.decode !== 'function') throw new Error()\r\n\r\n    return Type.decode(message)\r\n  }\r\n\r\n  const on = <Event extends typeof events[keyof typeof events]>(\r\n    event: Event,\r\n    callback: (event: Event['prototype'], message: events.MessageEvent) => void\r\n  ) => {}\r\n\r\n  on(events.KeyPress, (data, messageEvent) => {})\r\n\r\n  const keypress = events.KeyPress.create({ keyCode: 1001101010 })\r\n\r\n  const message = packEvent(keypress)\r\n\r\n  const encoded = events.MessageEvent.encode(message).finish()\r\n\r\n  const decoded = unpackEvent(events.MessageEvent.decode(encoded))\r\n\r\n  console.log(encoded, decoded)\r\n  const service = commands.Commands.create((method, requestData, callback) => {\r\n    const eventId = commands.MessageEvent.EventName[method.name]\r\n\r\n    const message = commands.MessageEvent.create({\r\n      event: eventId,\r\n      message: requestData,\r\n    })\r\n\r\n    // callback(\r\n    //   null,\r\n    //   TestResp.encode(\r\n    //     new TestResp({\r\n    //       result: 'HELLo',f\r\n    //     })\r\n    //   ).finish()\r\n    // )\r\n  })\r\n\r\n  service.typeText({\r\n    text: 'hello world',\r\n  })\r\n\r\n  // const result = await keyboard.pressKey({\r\n  //   keyCode: 10,\r\n  // })\r\n\r\n  // console.log(result)\r\n}\r\n\r\nbootstrap()\r\n"]}